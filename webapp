<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Co-op Connect: Commitment Screen</title>
  <style>
    /* Reset & Base */
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      background-color: black;
      color: #222;
      
    }

    #app-screen {
      position:relative;
      max-width: 350px;
      margin: 10px auto;
      height: 95vh;
      display: flex;
      flex-direction: column;
      background-color: rgba(170,30,95);
      border-radius: 18px;
      overflow: hidden;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
      box-sizing: border-box;
      gap:5px;

    }

    /* Header */
    #app-head, #app-body {
      width:100%;
      flex-direction:column;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      background:;
      flex-grow:0;
      box-sizing: border-box;
    }
    
    #app-body{
      flex-grow:1;
        justify-content: flex-start;
    }
        
.main-tab {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

/* Fixed top section */
.sub-header {
  flex: 0 0 auto;
  margin: 0 10px;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 3px;
  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);
  border-radius: 14px;
  border: 2px solid rgba(100, 100, 180, 0.9);
  background: white;
  box-sizing: border-box;
}

/* Middle section grows naturally */
.sub-body {
  flex: 1 1 auto; /* takes up leftover space */
  margin: 6px 10px;
  background: ;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  border-radius: 10px;
  padding: 6px;
  box-sizing: border-box;
  scrollbar-width: none;
  -ms-overflow-style: none;
}
.sub-body::-webkit-scrollbar {
  width: 0;
  height: 0;
}


    
    
    
  .action-row { 
    display: flex; 
    gap: 10px;
    justify-content: center;
    align-items:center;
    margin:15px;
    width:90%;
    background:;
    padding:0 10px;
    }
    
    
    .user-info { 
        display: flex; 
        align-items: center;
        background:blue;
        flex-grow:1;}

        .rnd-btn {
        padding: 5px;
        border-radius:50%;
        background: linear-gradient(rgb(245, 245, 245) 50%, rgb(255, 255, 255) );
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2; /* ensures it appears above siblings */
       
        border:2px solid rgb(200, 200, 200);
        border-right:2px solid rgba(205, 110, 0,0);
        cursor:pointer;
        transition:scale 0.2s ;}
        
        .rnd-btn-inner {
            display: flex;
           width:55px;
        height:55px;
         border-radius:50%;
         align-items: center;
        justify-content: center;
         border: 1.5px solid rgb(0,70,0);;
         background: linear-gradient(to bottom, rgb(100,180,20) 30% , rgb(20,110,0) 100%);
            z-index: 10; 
        }
    
        .rnd-btn-text {
         width:90%;
         height:90%;
         display: flex;
         border-radius:50%;
         font-size:18px;
         font-weight:bold;
         text-align:center;
         background: linear-gradient(to bottom, rgba(200,200,200,0.6) 20%, rgba(0,200,0,0.4) 50%, rgba(0,120,0,0.2) 70%, rgba(200,200,200,0.4) 100%);
         align-items: center;
        justify-content: center;
        margin:2px;
        color: white;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.7); 
    }
    

 .groupNameBar {
      position: absolute; /* child floats relative to parent */
      transform: translateX(10%);
      border-top: none;
      border-radius:0 16px 16px 0;
      width:75%;
      background: linear-gradient(rgb(245, 245, 245) 50%, rgb(255, 255, 255) );
      color: white;
      font-weight: 600;
      display: flex;
      flex-grow:1;
      align-items: center;
      justify-content: right;
        box-shadow: 0 2px 8px rgba(0,0,0,0.25);
        border:4px solid rgb(205, 205, 205);
      z-index: 0;  
    }
    
    .groupNameBar-inner {
     padding:  0px 10px 6px 10px;
     border: 4px solid rgb(10,10,130);
     border-radius: 12px 12px;
     height:18px;
     font-size:17px;
     font-weight:bold;
     text-align:center;
     width:66%;
     background:linear-gradient(to bottom, rgb(40,40,200) 5%, rgb(10,10,150) 95%);
     margin: 3px;
    }


   


    .total-sum {
      font-size: 1em;
      font-weight: 600;
      color: #34c759; /* Apple green */
    }


        
   .item-bar{
    position: relative;
    background: #fff;
    padding: 5px;
    border-radius: 18px;
    margin-bottom: 8px;
    display: flex;
    justify-content: flex-start;
    gap: 3px;
    align-items: stretch; 
    box-shadow: 0 1px 4px rgba(0,0,0,0.06);
    transition: transform 0.1s;
    border: 2px solid rgba(100,100,180,0.9);
    border-bottom: 4px solid rgba(200,200,200,0.9);
    opacity: 1;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);
    cursor: pointer;
}


    
    
    .item-view {
      position:relative;
      height:220px;
      border-radius: 18px;
      margin-bottom: 7px;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: transform 0.1s;
      transition: transform 0.5s;
      box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);
      cursor:pointer;
      background:rgba(255, 240, 240);
      border:4px solid rgba(215, 200, 200);
    }
    
    .item-view-details {
        position:relative;
        display:flex;
        width:100%; height:100%; flex-grow:1;
        flex-direction:column;
        justify-content: center;
        align-items: center;
        background: none;
        gap:2px;
        padding:10px;
    }
    
    
    .item-view-dtRowA {
        display:flex;
        flex-direction:column;
        width:100%; height:100%;
        justify-content: left;
        align-items: center;
        position:relative;
        box-sizing:border-box;
        overflow:hidden;
        margin-top:10px;
        box-shadow: inset 0 0px 1px rgba(90, 90, 90,0.9);
        background: rgba(245, 230, 230);
        border:2px solid rgba(255, 2140, 240,1);
        border-radius:10px;
    }
    
    
    
    
        .item-view-dtRowB {
        display:flex;
        flex-direction:column;
        width:100%; height:90px;
        align-items: flex-start;
        position:relative;
        box-sizing:border-box;
        padding:0 10px;
    }
   
    
    .prog-bar{
  
        width:100%;
        height:12px;
        left:-10px;
        border: 3px solid rgba(195, 180, 180);
        border-radius: 7px;
        background: 
        linear-gradient(to bottom, 
        rgb(200,200,200) 10%, 
        rgb(255,255,255) 50%,
        rgb(200,200,200) 100%);
        overflow:hidden;
         align-items: center;
      justify-content: center;
    }
       
      .prog{
          
        width:68%;
        height:100%;
        border: 1px solid rgba(20,20,70,0.9);
        border-radius: 4px;
        background: 
        linear-gradient(to bottom, 
        rgba(10,10,200,0.8)10%, 
        rgba(100,180,250,0.8) 50%,
        rgba(10,10,200,0.8) 100%);
        box-sizing:border-box;
      }
      
      .trg-box{
        padding:0 5px;
        height:100%;
        border-left: 1px solid rgba(195, 180, 180);
        align-items: center;
        justify-content: center;
    }  
      
    .item-view-qty {
    position:relative;
    display:flex;
    width:100px; height:100%; flex-grow:0;
    flex-direction:column;
    justify-content: center;
    align-items: center;
    gap:4px;
    background:rgba(0,0,70,0.0);
    border-left:1px solid rgba(200,200,200,0.9);
    border-radius:0 10px 10px 0;
    }

    
    
    .item-img  {
      background:;
      border-right:1px solid rgba(200,200,200,0.9);
      transition:scale 0.2s ;
      box-sizing:border-box;
      overflow:hidden;
      width:20%;
      flex-grow:1;

    }
    
    .item-img img{
     height:100%;
     width:100%;
     object-fit: cover; 
    }
    

   .item-info   {
    display:flex;
    flex-direction:column;
    align-items: flex-start;
    padding:5px 10px;
    box-sizing:border-box;
     width:60%;
      flex-grow:1;
    }
    
   .item-info strong {
      font-size: 0.95em;
      font-weight: 700;
      display: block;
    }
    .item-info small {  font-size: 0.75em; color: #888; }
        
    .est-savings {
      font-size: 0.8em;
      font-weight:bold;
      color:  rgba(50,080,150,0.8);
    }
    
        
    .item-bar-info {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%; /* Takes full width of parent .gloss-txt */
        align-items: flex-start;
        justify-content: center; /* Center content vertically inside B */
        padding: 0 5px;
        box-sizing: border-box;
        min-width: 0; 
    }
    
    .item-name {
        flex-grow: 1;
        color: rgb(10,10,125);
        font-size: 1.1em;
        font-weight: 700;
        width: 100%; /* Takes full width of parent .item-bar-info */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis; /* Ensures ellipsis works */
    }
    

    .desc-row { 
        display: flex;
        flex-grow: 0;
        text-align: left; 
        width: 100%;
        gap: 5px;
    }
    
    .est-price {
        /* CRITICAL: Must shrink-wrap its content */
        flex: 0 0 auto; 
        font-size: 0.7em;
        font-weight: 600;
        color: orange;
    }
    
    .item-brand {
        /* CRITICAL: Must fill the remaining space and handle overflow */
        flex-grow: 1; 
        min-width: 0; /* Allows overflow/ellipsis to work */
        font-size: 0.7em;
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: gray;
        background:;
    }
    
        .item-desc {
        /* CRITICAL: Must fill the remaining space and handle overflow */
        flex-grow: 1; 
        min-width: 0; /* Allows overflow/ellipsis to work */
        max-width:100%;
        font-size: 0.6em;
        height:40px;
        overflow: hidden;
        overflow-y:scroll;
        text-overflow: ellipsis;
        color: gray;
        background:;
        overflow-y: scroll; 
        &::-webkit-scrollbar {width: 0px;height: 0px;}
        scrollbar-width: none; 
        -ms-overflow-style: none;
    }


    .item-qty {
        display: flex;
        border-radius: 8px;
        font-size: 30px;
        font-weight: bold;
        justify-content: center;
        align-items: center;
        padding:0 5px;
        background:;
        /* Ensure no fixed width is applied here, content dictates size */
    }
    

    .item-sum {
        display:flex;
        align-items:flex-end;
        background:;}
    
        .item-sum-main, .item-sum-coin, .item-sum-curr {
        display:flex;
        font-size: 1.7em;
        color: #111;
        background:;}
        
        .item-sum-coin, .item-sum-curr {
        font-size: 0.8em;
        background:;
        height:30px;
    }
 
 
 /* Footer stays visible and does not get pushed off */
.sub-footer {
    position:relative;
  flex: 0 0 auto;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-top: 4px solid orange;
  background: rgb(10, 10, 150);
  color: white;
  border-radius: 12px 12px 0 0;
  height: 110px;
  box-sizing: border-box;
}



    .footer-title {
        position:absolute;
        transform: translateY(-50%);
        min-width:50%;
        max-width:70%;

        position: relative;
        background: #fff;
        border-radius: 11px;
        display: flex;
        justify-content: center;
        
        box-shadow: 0 1px 4px rgba(0,0,0,0.06);
        transition: transform 0.1s;
        border: 2px solid rgba(100,100,180,0.9);
        border-bottom: 2px solid rgba(200,200,200,0.9);
        cursor: pointer;
        color:black;
        font-size:13px;
        font-weight:bold;
        
       
    }
    
     .footer-list { 
     
         position:relative;
         height:170px;
         width:100%;
        display: flex;
        justify-content:center;
        align-items: center;
        background:;
        gap:5px
    }
 
    .item-row { 
        height:100%;
        display: flex; 
        gap: 10px;
        width:100%;
        background:; 
        overflow:hidden;
        background:;
        align-items: center; 
    }
    
    
    
    .item-nail:active {transform: scale(0.9); }
    .item-nail:hover {
        color: rgb(10,10,150); 
        background:white; 
        transition:all 0.5s;
        scale:1.1;
    }
    
    .item-nail {
        width:40px;
        padding: 0 5px;
        height:60px;
        display: flex;
        border-radius: 9px;
        font-size:12px;
        text-align:center;
        border: 1px solid rgba(255,255,255,0.2);
        align-items: center;
        justify-content: center;
        color: white;
        border-radius: 9px;
        cursor:pointer;
        transition:all 0.5s;
        background: linear-gradient(to bottom, 
            rgba(220,220,250,0.2) 20%, 
            rgba(000,000,250,0.2) 50%, 
            rgba(000,000,220,0.2) 70%, 
            rgba(200,200,200,0.2) 100%);
        }
    
    
    
    


    
      #left-btn, #right-btn { 
          position:absolute;
        width:20px;
        height:40px;
        display: flex;
        border-radius: 9px;
        font-size:14px;
        background: red;
        align-items: center;
        justify-content: center;
        color: white;
        z-index: 2;
            border-radius: 9px;
            cursor:pointer;
            transition:all 0.5s;
    }
    
       #left-btn {
          left: 10px;
        }
        
        
        #right-btn {
          right: 10px;
          }
    

         
    
        .left-blur, .right-blur {
          position: absolute;
          height:100%;
          width: 40px; /* length of fade; tune as needed */
          pointer-events: none; /*backdrop-filter: blur(3px); */
          z-index: 1;
       
          background: linear-gradient(to right, 
            rgba(10, 10, 150,1) 0%, 
             rgba(10, 10, 150,1) 50%,
            rgba(10, 10, 150,0.7) 80%, 
            rgba(10, 10, 150,0) 100%);
          pointer-events: none;
           mix-blend-mode: normal;
           cursor:none;
        }
        
        /* Left fade: transparent -> solid (blurs/obscures first 20px) */
        .left-blur {
          left: 0px;
        }
        
        /* Right fade: transparent -> solid on the right edge */
        .right-blur {
          right: 0px;
          rotate: 180deg;}
      
                  



/* grnBadge Style */


.grnBadge,
.redBadge,
.whiteBadge{
  position: absolute;
  bottom: -16px;
  background: linear-gradient(to bottom, rgb(60, 170, 70), rgb(30, 130, 70));
  border: 3px solid rgb(25, 125, 55);
  color: white;
  font-weight: bold;
  font-size: 0.9em;
  border-radius: 50px;
  min-width: 18px;
  height: 18px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 1px 3px rgba(0,0,0,0.5);
  text-shadow: 0 1px 1px rgba(0,0,0,0.5);
  z-index: 2;
  padding:3px;
}

.redBadge {
  top: -13px;
  right: -13px;
  background: rgb(230, 10, 10);
  border: 4px solid rgb(180, 10, 10);
  color: white;
  scale:0.8;
}

.whiteBadge {
  top: -6px;
  right: -6px;
  background: rgb(190, 10, 10);
  border: 3px solid rgb(130, 10, 10);
  color: white;
}



.sml-btn, .pay-btn, .rnd-btn, .gen-btn {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}
        
    .btn-icon {
      background: #f2f2f7;
      border: none;
      border-radius: 50%;
      width: 40px; height: 40px;
      font-size: 1.2em;
      cursor: pointer;
      display: flex; align-items: center; justify-content: center;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .pay-btn {
      padding: 4px;
      border-radius:18px;
      min-width:40%;
      max-width:70%;
     background: linear-gradient(to bottom, rgb(255, 210, 80), rgb(255, 160, 0));
  border-bottom: 5px solid rgb(180, 90, 0);
  box-shadow: inset 0 2px 1px rgba(255,255,255,0.4),
              0 4px 8px rgba(0,0,0,0.6),
              0 8px 15px rgba(0,0,0,0.3);
     
      color: white;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 2px 8px rgba(0,0,0,0.25);
      z-index: 2; /* ensures it appears above siblings */
     
      cursor:pointer;
      transition:scale 0.2s ;
    }
    
     .pay-btn:hover {
      box-shadow: 1px 1px 10px rgba(200, 0, 0, 1);
      scale:0.9;
      transition:scale 0.2s ;
    }
    
      .pay-btn:active {
      border-bottom:1px solid rgb(205, 110, 0);
    }
    
    .pay-btn-inner {
         padding: 4px;
         border: 2px solid rgb(0,70,0);;
         border-radius: 14px;
         width:100%;
        background: linear-gradient(to bottom, rgb(120,200,40), rgb(40,110,0));
  border: 2px solid rgb(0,70,0);
  box-shadow: inset 0 3px 5px rgba(255,255,255,0.2),
              inset 0 -3px 5px rgba(0,0,0,0.4);
     


        
    }
    
        .pay-btn-text {
         display: flex;
         border-radius: 10px;
         font-size:28px;
         font-weight:bold;
         text-align:center;
     
         height:45px;
         
         align-items: center;
        justify-content: center;
        margin:2px;
        
        color: white;
        text-shadow: 0 2px 3px rgba(0,0,0,0.7);
  background: linear-gradient(to bottom, rgba(255,255,255,0.5), rgba(255,255,255,0.05));
    }
    
    
    
      .sml-btn:hover, .group-name:hover {
      
      scale:0.95;
      transition:scale 0.2s ;
    }
    
      .sml-btn:active, .group-name:active {
      border-bottom:1px solid rgb(205, 110, 0);
    }   
    
    .sml-btn {
      padding: 3px;
      border-radius:16px;
      width:55px;
      background: linear-gradient(to bottom,  rgb(255, 200, 60) 1%, rgb(255, 165, 0) 95%);
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 2px 8px rgba(0,0,0,0.25);
      z-index: 2; /* ensures it appears above siblings */
      box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);
      border-bottom:4px solid rgb(205, 110, 0);
      cursor:pointer;
      transition:scale 0.2s ;
      scale:0.9;
    }
    

    
    .sml-btn-inner {
     padding: 1px;
     border: 1.5px solid rgb(0,70,0);;
     border-radius: 12px;
     width:100%;
     height:100%;
     background: linear-gradient(to bottom, rgb(100,180,20) 30% , rgb(20,110,0) 100%);
    }
    
    .sml-btn-text {
     display: flex;
     border-radius: 10px;
     font-size:18px;
     font-weight:bold;
     text-align:center;
     height:40px;
     background: linear-gradient(to bottom, rgba(200,200,200,0.6) 20%, rgba(0,200,0,0.4) 50%, rgba(0,120,0,0.2) 70%, rgba(200,200,200,0.4) 100%);
     align-items: center;
    justify-content: center;
    margin:2px;
    
    color: white;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.7); /* subtle dark blur under the text */

    }
    
    
    
    
    
    
     .group-name {
         color:black;
         font-size:13px;
         margin-top: 10px;
            padding: 3px 10px;
            box-sizing: border-box;
            background: rgba(245, 245, 245) 50%;
            box-shadow: inset 5px 5px 10px rgba(225, 220, 190);
            border: 1px solid rgba(150,150,150,0.7);
            border-radius: 8px;
            transform: scale(1);
            display: flex; /* Make it a Flex container to hold .gloss-txt */
        }
  

    

    .gen-btn {
      padding: 2.5px;
      border-radius:14px;
      background: linear-gradient(to bottom, 
      rgba(195, 180, 180) 10%, 
      rgba(195, 180, 180) 70%,
      rgba(155, 130, 130)  100%);
      border: 1px solid rgba(255,255,255,0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 0px 3px rgba(0,0,0,0.25);
      z-index: 2; /* ensures it appears above siblings */
      cursor:pointer;
      
       ;
       box-sizing:border-box;
    }
    


     .gen-btn-inner:hover {
      scale:1.05;
      transition:scale 0.2s ;
    }
    
      .gen-btn-inner:active {

        scale:0.98;
       transition:all 0.2s;
       box-shadow: inset 0 0px 10px rgba(0, 0, 0,0.5);
    }   
    
    
    

    
    .gen-btn-inner {
        padding: 3px;
        box-sizing:border-box;
        border: 1px solid rgba(20,20,70,0.9);
        border-radius: 12px;
        background: 
        linear-gradient(to bottom, rgb(100,180,250) 30% , rgb(10,10,200) 100%);
        transition:all 0.2s
    }
    
    .gen-btn-text {
        width:30px;
        height:30px;
        display: flex;
        border-radius: 9px;
        font-size:18px;
        font-weight:bold;
        text-align:center;
        border: 1px solid rgba(255,255,255,0.2);
        background: linear-gradient(to bottom, 
        rgba(220,220,250,0.2) 20%, 
        rgba(000,000,250,0.2) 50%, 
        rgba(000,000,220,0.2) 70%, 
        rgba(200,200,200,0.2) 100%);
    
        align-items: center;
        justify-content: center;
        color: white;

    }
    
     .gloss-btn:hover{ 
        transform: scale(1.02); 
        transition: transform 0.2s;
    } 

        .gloss-btn {
            padding: 3px;
            box-sizing: border-box;
            background: rgba(245, 245, 245) 50%;
            box-shadow: inset 5px 5px 10px rgba(225, 220, 190);
            border: 1px solid rgba(150,150,150,0.7);
            border-radius: 12px;
            transform: scale(1);
            height: 100%; 
            display: flex; /* Make it a Flex container to hold .gloss-txt */
        }
        
        #B.gloss-btn {
            /* flex-grow: 1 (grows), flex-shrink: 1 (shrinks), flex-basis: 0 (initial size is zero) */
            flex: 1 1 0; 
            min-width: 50px; 
            border-radius: 9px;
        }

        #A.gloss-btn,
        #C.gloss-btn {
            flex: 0 0 auto; 
            max-width: 150px; /* Limit their maximum size */
            min-width: 50px; /* Ensure a minimum size for content visibility */
        }
        
        
        #A.gloss-btn {
           border-radius: 12px 9px 9px  12px;
        }
        
        #C.gloss-btn {
           border-radius:  9px 12px 12px 9px ;
           
        }
    
    
    
        .gloss-txt {
            border-radius: 9px;
            height: 100%;
            width: 100%; 
            background: none;
            display: flex;
            align-items: center; 
            justify-content: center; 
            border-left: 1px solid rgba(255,255,255,0.9); 
        }
        
    

      .svg {
      filter: drop-shadow(1px 1px 1px rgba(0, 0, 0, 0.8));
    }



.img-placeholder {
  width: 100%;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(255,255,255,0.1);
  border-radius: 12px;
  border: 2px dashed rgba(255,255,255,0.3);
}

.img-placeholder svg {
  opacity: 0.8;
  transition: transform 0.3s ease, opacity 0.3s ease;
}

.img-placeholder:hover svg {
  transform: scale(1.1);
  opacity: 1;
}



.msg { color:#fff; margin-top:8px; font-size:13px; }

.progress-wrap { height:14px;background:#efefef;border-radius:10px;overflow:hidden;margin-top:12px;}
.progress-bar { height:100%; width:0%; border-radius:10px; transition:width 300ms ease; background:linear-gradient(90deg,#6a0dad,#8a2be2); }




.card.auth-card {
    display:flex;
    flex-direction:column;
    justify-content:;
    align-items:;
    width: 80%;
    height:100%;
    margin: 20px auto; /* Centers the card horizontally */
    padding: 25px;
    background-color: none; /* White background for contrast */
    border-radius: 12px; /* Rounded corners */
    border: 0px solid #eee; /* Light border */
    color:white;
}


.auth-card h2 { margin:0 0 12px 0; }
.auth-card label { display:block;margin:8px 0; font-size:12px; color:pink}
.auth-card input { width:100%; padding:6px 12px; border:1px solid #ccc;border-radius:15px; box-sizing:border-box; }


.auth-card button {
    height:40px;
   
}


/* ===== Signup Loading Spinner ===== */
.loading-dots {
  display: inline-block;
  font-weight: bold;
  letter-spacing: 2px;
  color: #444;
}

.loading-dots span {
  animation: pulseDots 1.2s infinite ease-in-out;
}

.loading-dots span:nth-child(2) {
  animation-delay: 0.2s;
}

.loading-dots span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes pulseDots {
  0%, 80%, 100% { opacity: 0.2; transform: scale(1); }
  40% { opacity: 1; transform: scale(1.3); }
}



#loginForm,
#signupForm{
display:flex;
flex-direction:column;
gap:10px;
}

#welcome,
#login,
#signUp,
#memberPage{
  display:flex;
  flex-direction:column; 
  height:100%; 
  position: relative; 
}



 
  </style>
</head>
<body>
<div id="app-screen">
    
 

    <div id="welcome" style="display:none;align-items:center;justify-content:center;flex-direction:column;color:white">Cogo</div>
    
    <div id="login" style="display:;">
      <div class="card auth-card">
        <h3>Cogo</h3>
        <form id="loginForm">
         
            <input id="loginUsername" name="username" placeholder="username" required />
 
            <input id="loginPassword" name="password" type="password" placeholder="password" required />
    
          <div style="display:flex;gap:8px;margin-top:10px;">
            <button type="submit">Log in</button>
            <button type="button" id="goToSignUp">Create account</button>
           
          </div>
        </form>
        <div id="loginMsg" class="msg"></div>
      </div>
    </div>
    
    
    
<div id="signUp" style="display:none;"> 
  <div class="card auth-card">
    <h3 id="signupHeader">Choose an Option</h3>
    
    <div id="optionButtons" style="display: flex; flex-direction: column; gap: 15px; margin-top: 20px; align-items: center;">
        <button type="button" id="btnJoinGroup" class="pay-btn" style="width: 80%;">
            <div class="pay-btn-inner"><div class="pay-btn-text" style="font-size: 22px;">Join Existing Group</div></div>
        </button>
        <button type="button" id="btnNewGroup" class="pay-btn" style="width: 80%;">
            <div class="pay-btn-inner" style="background: linear-gradient(to bottom, rgb(40,110,0), rgb(120,200,40));"><div class="pay-btn-text" style="font-size: 22px;">Create New Group</div></div>
        </button>
        <button type="button" id="backToLogin2" class="gen-btn" style="width: 60px;">
             <div class="gen-btn-inner"><div class="gen-btn-text" style="font-size:12px;">Back</div></div>
        </button>
    </div>

    <form id="newMemberForm" style="display:none; flex-direction: column; gap: 10px;">
        <p><a href="#" class="back-link" data-target="optionButtons">← Back</a></p>
        <input id="memberFullName" name="fullname" placeholder="Full Name" required />
        <input id="memberUsername" name="username" placeholder="Username" required />
        <input id="memberEmail" name="email" type="email" placeholder="Email" required />
        <input id="memberPassword" name="password" type="password" placeholder="Password" required />
        <input id="memberInviteCode" name="inviteCode" placeholder="Enter Group Invite Code" required />
        
        <input type="hidden" name="action" value="registerUser" />
        <input type="hidden" name="role" value="Member" />

        <button type="submit" class="pay-btn" style="margin-top: 15px;">
            <div class="pay-btn-inner"><div class="pay-btn-text" style="font-size: 20px;">Join Group</div></div>
        </button>
    </form>

    <form id="newGroupForm" style="display:none; flex-direction: column; gap: 10px;">
        <p><a href="#" class="back-link" data-target="optionButtons">← Back</a></p>
        <input id="groupName" name="groupName" placeholder="Group Name" required />
        <input id="groupTown" name="town" placeholder="Town" required />
        <input id="groupRegion" name="region" placeholder="Region (Optional)" />
        <input id="groupCountry" name="country" placeholder="Country (Optional)" />
        <input id="groupCurrency" name="currency" placeholder="Currency (e.g., GHS, USD)" value="GHS" required />

        <input type="hidden" name="action" value="createGroupAndAdmin" />
        
        <button type="submit" class="pay-btn" style="margin-top: 15px;">
             <div class="pay-btn-inner" style="background: linear-gradient(to bottom, rgb(40,110,0), rgb(120,200,40));"><div class="pay-btn-text" style="font-size: 20px;">Create Group</div></div>
        </button>
    </form>

    <form id="adminMemberForm" style="display:none; flex-direction: column; gap: 10px;">
        <h4 id="newGroupIdMsg" style="color: yellow; text-align: center;"></h4>
        <p>Complete your Admin profile:</p>
        <input id="adminFullName" name="fullname" placeholder="Your Full Name (Admin)" required />
        <input id="adminUsername" name="username" placeholder="Your Username" required />
        <input id="adminEmail" name="email" type="email" placeholder="Your Email" required />
        <input id="adminPassword" name="password" type="password" placeholder="Your Password" required />
        
        <input type="hidden" name="action" value="registerUser" /> 
        <input type="hidden" id="adminInviteCode" name="inviteCode" /> 
        <input type="hidden" name="role" value="Admin" />

        <button type="submit" class="pay-btn" style="margin-top: 15px;">
            <div class="pay-btn-inner"><div class="pay-btn-text" style="font-size: 20px;">Finalize Admin Sign Up</div></div>
        </button>
    </form>

    <div id="signupMsg" class="msg" style="margin-top: 10px;"></div>
  </div> 
</div> 
    
    
    <div id="memberWelcome" style="display:none;align-items:center;justify-content:center;flex-direction:column;">
      <h2 id="welcomeText">Welcome</h2>
      <div class="progress-wrap" style="width:80%;max-width:420px;">
        <div id="loadProgress" class="progress-bar" style="width:0%"></div>
      </div>
      <div id="loadingMsg" style="margin-top:8px; color:pink"></div>
    </div>

<div id="memberPage" style="display:none">
    
    
    <button id="signOutBtn" style="position: absolute; top: 10px; right: 10px; z-index: 100;">Sign out</button>  
    <div id="app-head">
            
    
      
     <div class="action-row">
              
              
                  <div class="sml-btn">
               <div class="sml-btn-inner">
                   <div class="sml-btn-text">
                       <svg class="svg" xmlns="http://www.w3.org/2000/svg" height="35px" viewBox="0 -960 960 960" width="35px" fill="white"><path d="M40-160v-160q0-34 23.5-57t56.5-23h131q20 0 38 10t29 27q29 39 71.5 61t90.5 22q49 0 91.5-22t70.5-61q13-17 30.5-27t36.5-10h131q34 0 57 23t23 57v160H640v-91q-35 25-75.5 38T480-200q-43 0-84-13.5T320-252v92H40Zm440-160q-38 0-72-17.5T351-386q-17-25-42.5-39.5T253-440q22-37 93-58.5T480-520q63 0 134 21.5t93 58.5q-29 0-55 14.5T609-386q-22 32-56 49t-73 17ZM160-440q-50 0-85-35t-35-85q0-51 35-85.5t85-34.5q51 0 85.5 34.5T280-560q0 50-34.5 85T160-440Zm640 0q-50 0-85-35t-35-85q0-51 35-85.5t85-34.5q51 0 85.5 34.5T920-560q0 50-34.5 85T800-440ZM480-560q-50 0-85-35t-35-85q0-51 35-85.5t85-34.5q51 0 85.5 34.5T600-680q0 50-34.5 85T480-560Z"/></svg> 
                       </div>
                       
                  </div>
                  <span class="grnBadge">5</span>
           </div>
           
        
              
                  
                   
                   
       
           
            <div class="sml-btn" >
               <div class="sml-btn-inner">
                   <div class="sml-btn-text">
                       
                       <svg class="svg" xmlns="http://www.w3.org/2000/svg" height="35px" viewBox="0 -960 960 960" width="35px" fill="white"><path d="M280-80q-33 0-56.5-23.5T200-160q0-33 23.5-56.5T280-240q33 0 56.5 23.5T360-160q0 33-23.5 56.5T280-80Zm400 0q-33 0-56.5-23.5T600-160q0-33 23.5-56.5T680-240q33 0 56.5 23.5T760-160q0 33-23.5 56.5T680-80ZM208-800h590q23 0 35 20.5t1 41.5L692-482q-11 20-29.5 31T622-440H324l-44 80h480v80H280q-45 0-68-39.5t-2-78.5l54-98-144-304H40v-80h130l38 80Z"/></svg> </div>
                  </div>
                  
              
                  <span class="redBadge">8</span>
           </div>
           
                         <div class="sml-btn">
               <div class="sml-btn-inner">
                   <div class="sml-btn-text">
                       <svg class="svg" xmlns="http://www.w3.org/2000/svg" height="35px" viewBox="0 -960 960 960" width="35px" fill="white"><path d="M40-160v-160q0-34 23.5-57t56.5-23h131q20 0 38 10t29 27q29 39 71.5 61t90.5 22q49 0 91.5-22t70.5-61q13-17 30.5-27t36.5-10h131q34 0 57 23t23 57v160H640v-91q-35 25-75.5 38T480-200q-43 0-84-13.5T320-252v92H40Zm440-160q-38 0-72-17.5T351-386q-17-25-42.5-39.5T253-440q22-37 93-58.5T480-520q63 0 134 21.5t93 58.5q-29 0-55 14.5T609-386q-22 32-56 49t-73 17ZM160-440q-50 0-85-35t-35-85q0-51 35-85.5t85-34.5q51 0 85.5 34.5T280-560q0 50-34.5 85T160-440Zm640 0q-50 0-85-35t-35-85q0-51 35-85.5t85-34.5q51 0 85.5 34.5T920-560q0 50-34.5 85T800-440ZM480-560q-50 0-85-35t-35-85q0-51 35-85.5t85-34.5q51 0 85.5 34.5T600-680q0 50-34.5 85T480-560Z"/></svg> 
                       </div>
                       
                  </div>
                  <span class="grnBadge">5</span>
           </div>
           
           
           
           </div> 
        
        
        <div class="group-details" style="display:; flex-direction:column; align-items:center; color:white; text-align:center;">
           <div class="group-name">...</div>
          <h4 class="user-name" style="margin:0;">...</h4>          
        </div>
    
        </div>
        
    <div id="app-body">
         
         <div  id="orders" class="main-tab">
          <div id="order-header" class="sub-header">
         
         <div id="B" class="gloss-btn"
         style="
                flex: 1 1 0; 
                box-shadow: inset 0px 5px 10px rgba(225, 220, 190);">
             
          <div class="gloss-txt"
               style="  border-left:0px solid white;border-top:1px solid white;
                        padding:0px 5px;">
              
              <div class="item-bar-info">
                <div class="order-float">ORDER 772</div>
              </div>
          </div>
         </div> 
         
         
        <div  id="C" class="gloss-btn"
              style="box-shadow: inset -5px 5px 10px rgba(225, 220, 190);">
            
          <div class="gloss-txt"
               >
           <span class="total-sum">GHS</span>
           
          </div>
         </div>  
    
    
          </div>
          <div id="order-list" class="sub-body">
             
        <div class="item-bar" style="display:none">
             
          <div  id="A" class="gloss-btn"
                style="box-shadow: inset 5px 5px 10px rgba(225, 220, 190)">
              
          <div class="gloss-txt">
           
           <span class="item-qty" style="color:rgba(0, 0, 109, 1)">9</span>
           <span class="est-savings" style="display:none">Save GHS 0.00</span>
          </div>
         </div> 
         
         
         <div id="B" class="gloss-btn"
         style="
                flex: 1 1 0; 
                box-shadow: inset 0px 5px 10px rgba(225, 220, 190);">
             
          <div class="gloss-txt"
               style="  border-left:0px solid white;border-top:1px solid white;
                        padding:0px 5px;">
              
              <div class="item-bar-info">
               <div class="item-name">Milk (Powdered)</div>
               <div class="desc-row">
                   <small class="est-price">GHS 0.00</small>
                   <small class="item-brand">Nido</small>
                   
              </div>
              </div>
          </div>
         </div> 
         
         
        <div  id="C" class="gloss-btn"
              style="box-shadow: inset -5px 5px 10px rgba(225, 220, 190);">
            
          <div class="gloss-txt"
               style="border-left:0px solid white;border-right:1px solid white;">
           <span class="item-sum" style="padding-left:7px;">
               <div class="item-sum-main">75</div>
               <div class="item-sum-coin">18</div>
           </span>
           
          </div>
         </div> 
    </div> 
        <div class="item-view" style="display:none">
          <div class="item-view-details">
            <div class="item-view-dtRowA">
              <div style="display:flex; width:100%; height:100%">
                <div class="item-img">
                    
                    <img src="https://capecoastmall.com/wp-content/uploads/2024/04/NewBookImages-59.png" alt="Image">
                    
                    </div>
                <div class="item-info">
                  <strong class="item-name">Milk Powdered</strong>
                  <small class="item-brand">Brand: Nido</small>
                  <small class="unit-size">Size : 5kg Container</small>
                  <small class="est-price">Price: 120.00</small>
                  <small class="item-desc">Vitamin enriched full cream milk  ghasd hgas dghsasasasda asdfas asdf  </small>
                </div>
              </div>
              <div style="display:flex; width:90%; height:35px; border-top:1px solid rgba(0,0,0,0.2); gap:5px; align-items:center">
                <div class="prog-bar"><div class="prog"></div></div>
                <div class="trg-box"><div id="trg-qty">240 </div></div>
              </div>
            </div>
    
            <div class="item-view-dtRowB">
              <span class="item-sum"> 
                   <div class="item-sum-curr">GHC</div>
                   <div class="item-sum-main">120</div>
                   <div class="item-sum-coin">99</div>
              </span>
              <small class="est-savings">Est. Save: GHS 2.00</small>
            </div>
          </div>
    
          <div class="item-view-qty">
            <div id="qty-add" class="gen-btn">
              <div class="gen-btn-inner"><div class="gen-btn-text">
                <!-- up arrow -->
                <svg xmlns="http://www.w3.org/2000/svg" height="48px" viewBox="0 -960 960 960" width="48px" fill="white"><path d="m480-540.43-197 197L226.43-400 480-653.57 733.57-400 677-343.43l-197-197Z"/></svg>
              </div></div>
            </div>
    
            <div class="gen-btn" style="transform:scale(1.1);">
              <div class="gen-btn-inner" style="background: rgba(245, 245, 245) 50%; box-shadow: inset 5px 5px 10px rgba(235, 200, 200);">
                <div class="gen-btn-text" style="width:auto; height:35px; background:none; border-left: 1px solid rgba(255,255,255,0.9);">
                  <span class="item-qty" style="color:rgba(0, 0, 109, 1)">77</span>
                </div>
              </div>
            </div>
    
            <div id="qty-min" class="gen-btn">
              <div class="gen-btn-inner"><div class="gen-btn-text">
                <!-- down arrow -->
                <svg xmlns="http://www.w3.org/2000/svg" height="48px" viewBox="0 -960 960 960" width="48px" fill="white"><path d="M480-330.43 226.43-584 283-640.57l197 197 197-197L733.57-584 480-330.43Z"/></svg>
              </div></div>
            </div>
    
            <div  id="qty-del" class="gen-btn" style="transform:scale(0.9);">
              <div class="gen-btn-inner" 
                   style="background: rgba(245, 245, 245) 50%; box-shadow: inset 5px 5px 10px rgba(235, 200, 200);">
                  <div class="gen-btn-text" style="width:35px; height:30px; background:none; border-left: 1px solid rgba(255,255,255,0.9);">
                <!-- delete icon -->
                <svg xmlns="http://www.w3.org/2000/svg" height="40px" viewBox="0 -960 960 960" width="40px" fill="red"><path d="m325.19-263.45-61.74-61.74L417.7-480 263.45-633.81l61.74-61.74L480-541.3l153.81-154.25 61.74 61.74L541.3-480l154.25 154.81-61.74 61.74L480-417.7 325.19-263.45Z"/></svg>
              </div>
              </div>
            </div>
          </div>
        </div>
    
    
    
    </div>
    
    <div id="order-foot" class="sub-footer">
            
        <div class="footer-title">Item List </div>
            
        <div class="footer-list"> 
        <div class="left-blur"></div>
        <div class="right-blur"></div>
            <div id="left-btn"><svg xmlns="http://www.w3.org/2000/svg" height="48px" viewBox="0 -960 960 960" width="48px" fill="white"><path d="M561-240 320-481l241-241 43 43-198 198 198 198-43 43Z"/></svg></div>
            <div class="item-row">
                
                
            
                ...
                
            </div>
            <div id="right-btn"><svg xmlns="http://www.w3.org/2000/svg" height="48px" viewBox="0 -960 960 960" width="48px" fill="white"><path d="M530-481 332-679l43-43 241 241-241 241-43-43 198-198Z"/></svg></div>
          </div>  
          
              
          
    </div>
    
          <div id="templates" style="display:;">
    
      <template id="item-template">
          
          
       <div class="item">
        <div class="item-bar" style="display:flex">
             
          <div  id="A" class="gloss-btn"
                style="box-shadow: inset 5px 5px 10px rgba(225, 220, 190)">
              
          <div class="gloss-txt">
           
           <span class="item-qty" style="color:rgba(0, 0, 109, 1)"></span>
           <span class="est-savings" style="display:none"></span>
          </div>
         </div> 
         
         
         <div id="B" class="gloss-btn"
         style="
                flex: 1 1 0; 
                box-shadow: inset 0px 5px 10px rgba(225, 220, 190);">
             
          <div class="gloss-txt"
               style="  border-left:0px solid white;border-top:1px solid white;
                        padding:0px 5px;">
              
              <div class="item-bar-info">
               <div class="item-name"></div>
               <div class="desc-row">
                   <small class="est-price"></small>
                   <small class="item-brand"></small>
                   
              </div>
              </div>
          </div>
         </div> 
         
         
        <div  id="C" class="gloss-btn"
              style="box-shadow: inset -5px 5px 10px rgba(225, 220, 190);">
            
          <div class="gloss-txt"
               style="border-left:0px solid white;border-right:1px solid white;">
           <span class="item-sum">
               
               <div class="item-sum-main"></div>
               <div class="item-sum-coin"></div>
      
             </span>
           
          </div>
         </div> 
    </div>  
        <div class="item-view" style="display:none">
          <div class="item-view-details">
            <div class="item-view-dtRowA">
              <div style="display:flex; width:100%; height:100%">
                <div class="item-img">
                    <img>
                </div>
                <div class="item-info">
                  <strong class="item-name">Milk Powdered</strong>
                  <small class="item-brand">Brand: Nido</small>
                  <small class="unit-size">Size : 5kg Container</small>
                  <small class="est-price">Price: 120.00</small>
                  <small class="item-desc">Vitamin enriched full cream milk  ghasd hgas dghsasasasda asdfas asdf  </small>
                </div>
              </div>
              <div style="display:flex; width:90%; height:35px; border-top:1px solid rgba(0,0,0,0.2); gap:5px; align-items:center">
                <div class="prog-bar"><div class="prog"></div></div>
                <div class="trg-box"><div id="trg-qty">240 </div></div>
              </div>
            </div>
    
            <div class="item-view-dtRowB">
              <span class="item-sum"> 
                   <div class="item-sum-curr">GHC</div>
                   <div class="item-sum-main">120</div>
                   <div class="item-sum-coin">99</div>
              </span>
              <small class="est-savings">Est. Save: GHS 2.00</small>
            </div>
          </div>
    
          <div class="item-view-qty">
            <div id="qty-add" class="gen-btn">
              <div class="gen-btn-inner"><div class="gen-btn-text">
                <!-- up arrow -->
                <svg xmlns="http://www.w3.org/2000/svg" height="48px" viewBox="0 -960 960 960" width="48px" fill="white"><path d="m480-540.43-197 197L226.43-400 480-653.57 733.57-400 677-343.43l-197-197Z"/></svg>
              </div></div>
            </div>
    
            <div class="gen-btn" style="transform:scale(1.1);">
              <div class="gen-btn-inner" style="background: rgba(245, 245, 245) 50%; box-shadow: inset 5px 5px 10px rgba(235, 200, 200);">
                <div class="gen-btn-text" style="width:auto; height:35px; background:none; border-left: 1px solid rgba(255,255,255,0.9);">
                  <span class="item-qty" style="color:rgba(0, 0, 109, 1)">77</span>
                </div>
              </div>
            </div>
    
            <div id="qty-min" class="gen-btn">
              <div class="gen-btn-inner"><div class="gen-btn-text">
                <!-- down arrow -->
                <svg xmlns="http://www.w3.org/2000/svg" height="48px" viewBox="0 -960 960 960" width="48px" fill="white"><path d="M480-330.43 226.43-584 283-640.57l197 197 197-197L733.57-584 480-330.43Z"/></svg>
              </div></div>
            </div>
    
            <div  id="qty-del" class="gen-btn" style="transform:scale(0.9);">
              <div class="gen-btn-inner" 
                   style="background: rgba(245, 245, 245) 50%; box-shadow: inset 5px 5px 10px rgba(235, 200, 200);">
                  <div class="gen-btn-text" style="width:35px; height:30px; background:none; border-left: 1px solid rgba(255,255,255,0.9);">
                <!-- delete icon -->
                <svg xmlns="http://www.w3.org/2000/svg" height="40px" viewBox="0 -960 960 960" width="40px" fill="red"><path d="m325.19-263.45-61.74-61.74L417.7-480 263.45-633.81l61.74-61.74L480-541.3l153.81-154.25 61.74 61.74L541.3-480l154.25 154.81-61.74 61.74L480-417.7 325.19-263.45Z"/></svg>
              </div>
              </div>
            </div>
          </div>
        </div>
        <div class="item-edit" style="display:none"></div>
       </div>   
     
    
      </template>
    
    </div>
        </div>
    
    </div>

</div>  
   
</div>  

  
<script>
/* ==============================
   1. Co-op Connect: Stage 1 Logic
   ============================== */

const cogoDATA =
  "https://script.google.com/macros/s/AKfycbwEYMAcVc6i6u4DV66eB9OvDh-fFE08hgHmHOBdr930lpF26A8KQoeflbjkXp2twvC2Xw/exec";

const GROUPS_URL = `${cogoDATA}?sheet=Groups`;
const USERS_URL = `${cogoDATA}?sheet=Users`;
const ITEMS_URL = `${cogoDATA}?sheet=Items`;

let groupsData = {};       // { groupID: currency }
let groupsDataList = [];   // full group objects for lookups
let usersData = [];        // from Users sheet
let itemsData = [];        // from Items sheet
let orderItems = {};       // track user selections


/* ==============================
   USER LOGIN HANDLING
   ============================== */

// Check if user exists in localStorage
document.addEventListener("DOMContentLoaded", () => {
  const savedUser = localStorage.getItem("coop_user");
  if (!savedUser) {
    showLoginPage();
  } else {
    showWelcomeAndLoad(savedUser);
  }
});




/* ============================================
   UI INITIALIZATION (LOGIN / SIGNUP / SIGNOUT)
   ============================================ */

function initUI() {
  const loginDiv = document.getElementById("login");
  const signUpDiv = document.getElementById("signUp");
  const welcomeDiv = document.getElementById("welocme");
  const memberDiv = document.getElementById("memberPage");

  const goToSignUpBtn = document.getElementById("goToSignUp");
  const backToLoginBtn = document.getElementById("backToLogin");
 

  // 🔹 1. Handle login form
  const loginForm = document.getElementById("loginForm");
  if (loginForm) {
    loginForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const username = document.getElementById("loginUsername").value.trim();
      const password = document.getElementById("loginPassword").value;
      await attemptLogin(username, password);
    });
  }

  // 🔹 2. Handle "Create Account" button
  if (goToSignUpBtn) {
    goToSignUpBtn.addEventListener("click", () => {
      localStorage.removeItem("coop_user");
      sessionStorage.clear();

      if (loginDiv) loginDiv.style.display = "none";
      if (signUpDiv) signUpDiv.style.display = "flex";
      if (welcomeDiv) welcomeDiv.style.display = "none";
      if (memberDiv) memberDiv.style.display = "none";
    });
  }

  // 🔹 3. Handle "Back to Login" button
  if (backToLoginBtn) {
    backToLoginBtn.addEventListener("click", () => {
      if (signUpDiv) signUpDiv.style.display = "none";
      if (loginDiv) loginDiv.style.display = "flex";
      if (welcomeDiv) welcomeDiv.style.display = "none";
      if (memberDiv) memberDiv.style.display = "none";
    });
  }


// 🔹 4. Handle "Sign Out" button (final stable version)
function attachSignOutListener() {
  const btn = document.getElementById("signOutBtn");
  if (!btn) {
    // Keep retrying until the button is available
    setTimeout(attachSignOutListener, 500);
    return;
  }

  btn.addEventListener("click", () => {
    // Clear user data
    localStorage.removeItem("coop_user");
    localStorage.removeItem("username");
    sessionStorage.clear();

    // Reset form fields for safety
    const loginUsername = document.getElementById("loginUsername");
    const loginPassword = document.getElementById("loginPassword");
    if (loginUsername) loginUsername.value = "";
    if (loginPassword) loginPassword.value = "";

    // Hide all major sections instantly
    const login = document.getElementById("login");
    const welcome = document.getElementById("welocme");
    const signUp = document.getElementById("signUp");
    const member = document.getElementById("memberPage");

    if (welcome) welcome.style.display = "none";
    if (signUp) signUp.style.display = "none";
    if (member) member.style.display = "none";

    // Delay slightly before showing login (prevents overlap on first click)
    setTimeout(() => {
      if (login) login.style.display = "flex";
    }, 100);
  });
}

// Call after DOM is ready
attachSignOutListener();



  // 🔹 5. Handle signup form
  const signupForm = document.getElementById("signupForm");
  if (signupForm) {
    signupForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const signupMsg = document.getElementById("signupMsg");
      signupMsg.textContent = "Creating account...";

      const email = document.getElementById("signupEmail").value.trim();
      const password = document.getElementById("signupPassword").value;
      const inviteCode = document.getElementById("inviteCode").value.trim();

      try {
        const usersRes = await fetch(`${USERS_URL}`);
        const users = await usersRes.json();

        let groupID, invitedBy = "", isAdmin = false;

        if (inviteCode) {
          const inviter = users.find(
            (u) =>
              (u.userID && u.userID.toString() === inviteCode) ||
              (u.username && u.username.toString() === inviteCode)
          );
          if (inviter) {
            groupID = inviter.groupID;
            invitedBy = inviter.userID;
          } else {
            signupMsg.textContent = "Invalid invitation code.";
            return;
          }
        } else {
          groupID = "G" + Math.floor(1000 + Math.random() * 9000);
          isAdmin = true;
        }

        const userID = "U" + Date.now();
        const body = {
          action: "registerUser",
          userID,
          groupID,
          name: email.split("@")[0],
          email,
          username: email,
          passwordHash: password,
          invitedBy,
          isAdmin,
          createdAt: new Date().toISOString(),
        };

        const res = await fetch(cogoDATA, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        });

        const result = await res.json();
        if (result.success) {
          signupMsg.textContent = "Account created successfully! Logging in...";
          localStorage.setItem("coop_user", email);
          setTimeout(() => showWelcomeAndLoad(email), 1000);
        } else {
          signupMsg.textContent = result.message || "Signup failed. Try again.";
        }
      } catch (err) {
        console.error("Signup error:", err);
        signupMsg.textContent = "Network or server error.";
      }
    });
  }

  // 🔹 6. Initial state check
  const savedUser = localStorage.getItem("coop_user");
  if (savedUser) {
    showWelcomeAndLoad(savedUser);
  } else {
    showLoginPage();
  }
  

}

// Initialize once the DOM is fully loaded
document.addEventListener("DOMContentLoaded", initUI);




async function showWelcomeAndLoad(username) {
  // show welcome wrapper
  document.getElementById("welcome").style.display = "flex";
  document.getElementById("login").style.display = "none";
  document.getElementById("signUp").style.display = "none";
  document.getElementById("memberPage").style.display = "none";

  // render progress html (only once)
  const welcomeDiv = document.getElementById("welcome");
  welcomeDiv.innerHTML = `<div style="margin:auto;text-align:center;">
  
      <h1>Cogo</h1>
      <p id="welcomeName">Welcome, ${username}</p>
      <div id="progressBar" style="width:80%;height:8px;background:#ddd;margin:auto;overflow:hidden;border-radius:6px;">
        <div id="progressFill" style="height:8px;width:0;background:linear-gradient(90deg,#6a0dad,#8a2be2);transition:width 5s ease;"></div>
      </div>
      <p id="progressText" style="font-size:12px;color:pink;">Starting...</p>
    </div>`;

  // small helper to go back to login on error
  function abortAndReturnToLogin(msg) {
    const text = document.getElementById("progressText");
    if (text) text.textContent = msg || 'Error loading data.';
    console.error(msg);
    // show login after a short delay so user sees the error
    setTimeout(() => {
      showLoginPage();
    }, 900);
  }

  try {
    // Step 1: load groups
    simulateProgress(10, 'Loading groups...');
    const groupsRes = await fetch(GROUPS_URL);
    if (!groupsRes.ok) throw new Error('Groups fetch failed: ' + groupsRes.status);
    const groups = await groupsRes.json();
    groupsDataList = groups;
    groups.forEach(g => (groupsData[String(g.groupID)] = g.currency));

    // Step 2: load users
    simulateProgress(45, 'Loading users...');
    const usersRes = await fetch(USERS_URL);
    if (!usersRes.ok) throw new Error('Users fetch failed: ' + usersRes.status);
    usersData = await usersRes.json();

    // Step 3: load items
    simulateProgress(75, 'Loading items...');
    const itemsRes = await fetch(ITEMS_URL);
    if (!itemsRes.ok) throw new Error('Items fetch failed: ' + itemsRes.status);
    itemsData = await itemsRes.json();

    // Finalize
    simulateProgress(95, 'Finalizing...');
    // small wait for smoother UX
    await new Promise(r => setTimeout(r, 250));
    simulateProgress(100, 'Done');

    // show main page
    document.getElementById("welcome").style.display = "none";
    document.getElementById("memberPage").style.display = "flex";

    // set current user context if you have that function
    if (typeof setCurrentUserContext === 'function') {
      try { await setCurrentUserContext(); } catch(e){ console.warn('setCurrentUserContext failed', e); }
    }

  } catch (err) {
    abortAndReturnToLogin('Error during loading: ' + (err && err.message ? err.message : err));
  }
}

// Simulate progress bar
function simulateProgress(percent = 0, message = '') {
  const fill = document.getElementById("progressFill");
  const text = document.getElementById("progressText");
  if (!fill || !text) {
    console.warn('Progress elements not found');
    return;
  }
  // clamp percent
  const p = Math.max(0, Math.min(100, Number(percent) || 0));
  fill.style.width = p + "%";
  text.textContent = (message ? message + ' ' : '') + p + '%';
}

/* ==============================
   LOGIN FUNCTION
   ============================== */
async function attemptLogin(username, password) {
  const loginMsg = document.getElementById('loginMsg');
  loginMsg.textContent = 'Checking...';
  try {
    const usersRes = await fetch(`${cogoDATA}?sheet=Users`);
    const users = await usersRes.json();

    const found = users.find(u =>
      (u.username && u.username.toLowerCase() === username.toLowerCase()) ||
      (u.Username && u.Username.toLowerCase() === username.toLowerCase())
    );

    if (!found) {
      loginMsg.textContent = 'User not found.';
      return;
    }

    const stored = found.password || found.passwordHash || '';
    if (stored.toString() === password.toString()) {
      localStorage.setItem('coop_user', username);
      loginMsg.textContent = 'Login successful!';
      showWelcomeAndLoad(username);
    } else {
      loginMsg.textContent = 'Wrong password.';
    }

  } catch (err) {
    console.error('Login error:', err);
    loginMsg.textContent = 'Login failed (network or permission issue).';
  }
}


document.getElementById('loginForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const username = document.getElementById('loginUsername').value.trim();
  const password = document.getElementById('loginPassword').value.trim();
  attemptLogin(username, password);
});




document.addEventListener("DOMContentLoaded", async () => {
  await loadData();
  renderItemCards();

  // Activate manually written item-nails (those in footer)
  document.querySelectorAll(".item-nail").forEach(nail => {
    nail.addEventListener("click", () => {
      const id = nail.dataset.id;
      if (id) handleItemClick(id);
    });
  });
});


/* ==============================
   2. LOAD SHEET DATA
   ============================== */
    async function loadData() {
      try {
        // Load Groups
        const groupsRes = await fetch(GROUPS_URL);
        const groups = await groupsRes.json();
        groupsDataList = groups; // keep full dataset
        groups.forEach(g => (groupsData[String(g.groupID)] = g.currency));
    
        // Load Users
        const usersRes = await fetch(USERS_URL);
        usersData = await usersRes.json();
    
        // Load Items
        const itemsRes = await fetch(ITEMS_URL);
        itemsData = await itemsRes.json();
    
        console.log("Groups loaded:", groupsData);
        console.log("Users loaded:", usersData);
        console.log("Items loaded:", itemsData);
        
        
        // 👇 temporarily set the active user for testing
        localStorage.setItem("coop_user", "oak");
    
        // Set current user and update interface
        await setCurrentUserContext();
    
      } catch (err) {
        console.error("Error loading data:", err);
      }
    }



/* ==============================
   3. SET CURRENT USER + GROUP CONTEXT
   ============================== */
 
async function setCurrentUserContext() {
  // TEMP: Hardcoded username until login screen is built
  const currentUsername = localStorage.getItem("coop_user") || "JDVANCE";

  // 1️⃣ Find user record
  const user = usersData.find(u => u.username === currentUsername);
  if (!user) {
    console.warn("User not found:", currentUsername);
    return;
  }

  // 2️⃣ Find group record by groupID
  const group = groupsDataList.find(g => g.groupID == user.groupID);
  if (!group) {
    console.warn("Group not found for ID:", user.groupID);
    return;
  }

  // 3️⃣ Store in memory for reuse
  window.currentUser = user;
  window.currentGroup = group;

  // 4️⃣ Update interface
  updateUserInterface(user, group);
}


/* ==============================
   4. UPDATE INTERFACE ELEMENTS
   ============================== */

function updateUserInterface(user, group) {
  // Example: Update top header
  const headerName = document.querySelector(".group-details h4");
  const headerGroup = document.querySelector(".group-details p");
  const balance = document.querySelector(".balance");
  const footerGroup = document.querySelector(".footer-title");
  const bigBtn = document.querySelector(".group-name");

  if (headerName) headerName.textContent = `${user.fullname} (${user.role})`;
  if (headerGroup) headerGroup.textContent = group.groupName;
  if (balance) balance.innerHTML = `Balance: ${group.currency} ${user.balance || 0}`;

  // Footer + main button
  if (footerGroup) footerGroup.textContent = group.currency;
  if (bigBtn) bigBtn.textContent = group.groupName;

  console.log("UI updated for:", user.fullname, "in", group.groupName);
}







/* ==============================
   3. SETUP CURRENCY
   ============================== */

function getCurrency(item) {
    return groupsData[String(item.groupID)] || "GS"; 
} 

const currency = getCurrency(item); 



/* ==============================
   2. RENDER ITEM CARDS (TOP ROW)
   ============================== */
function renderItemCards() {
  const row = document.querySelector(".item-row");
  if (!row) return;
  row.innerHTML = "";

  itemsData.forEach(item => {
    const card = document.createElement("div");
    card.className = "item-nail";
    card.dataset.id = item.itemID;
    card.innerHTML = `
      <h5>${item.name.split("(")[0]}</h5>
    `;
    row.appendChild(card);
    card.addEventListener("click", () => handleItemClick(item.itemID));
  });
}





function closeAllOtherViews(currentItemContainer = null) {
    document.querySelectorAll(".item").forEach(itemContainer => {
        // Skip the container that is either being clicked or is already being handled
        if (itemContainer === currentItemContainer) return;
        
        const bar = itemContainer.querySelector(".item-bar");
        const view = itemContainer.querySelector(".item-view");
        
        // Hide the view and show the bar
        if (view && bar) {
            view.style.display = 'none';
            bar.style.display = 'flex';
        }
    });
}

/**
 * Handles the click on an item-bar: closes others, hides bar, shows view.
 * @param {HTMLElement} itemContainer - The specific .item container that was clicked.
 */
function handleBarClick(itemContainer) {
    // 1. Hide all other views first (Mutual Exclusion)
    closeAllOtherViews(itemContainer);

    const bar = itemContainer.querySelector('.item-bar');
    const view = itemContainer.querySelector('.item-view');

    // 2. Show the selected view and hide its bar
    view.style.display = 'flex';
    bar.style.display = 'none';
}

/* NOTE: Assume 'currency' is a defined variable (e.g., '$') */
function populateDetailView(itemViewEl, item) {
    // Select the fields from the target .item-view element
    const nameEl = itemViewEl.querySelector(".item-name");
    const descEl = itemViewEl.querySelector(".item-desc");
    const brandEl = itemViewEl.querySelector(".item-brand");
    const priceEl = itemViewEl.querySelector(".est-price");
    const savingsEl = itemViewEl.querySelector(".est-savings");

    // Populate the static content
    if (nameEl) nameEl.textContent = item.name;
    if (descEl) descEl.textContent = item.description;
    if (brandEl) brandEl.textContent = item.brand;
    if (priceEl) priceEl.textContent = `${currency} ${item.price.toFixed(2)}`; 
    if (savingsEl) savingsEl.textContent = `-${currency} ${item.savings.toFixed(2)}`;
    
    // Dynamic fields (.item-sum, .item-qty) will be handled by syncDetailViewDisplays()
}




function showItemView(item, itemViewEl) {
    // 1. Populate the .item-view with the item data
    populateDetailView(itemViewEl, item);
    
    // 2. Ensure quantity and sum are updated
    // You must ensure that syncDetailViewDisplays() now targets this specific itemViewEl 
    // instead of a global detailModal element.
    syncDetailViewDisplays(itemViewEl); 

    // 3. (Your future logic to show the element goes here)
    // For now, let's assume you'll make it visible:
    // itemViewEl.style.display = 'block'; 
}

/* ==============================
   4. HELPERS
   ============================== */
function highlight(el) {
  el.style.transition = "transform 0.2s";
  el.style.transform = "scale(0.95)";
  setTimeout(() => (el.style.transform = "scale(1)"), 200);
}

function updateTotals() {
  let total = 0;
  document.querySelectorAll(".item-bar").forEach(bar => {
    const price = parseFloat(bar.querySelector(".est-price").textContent.replace(/[^\d.]/g, ""));
    const qty = parseInt(bar.querySelector(".item-qty").textContent);
    total += price * qty;
  });

  const totalEl = document.querySelector(".total-sum");
  if (totalEl) {
    totalEl.textContent = `GHS ${total.toFixed(2)}`;
    totalEl.animate([{ transform: "scale(1.1)" }, { transform: "scale(1)" }], { duration: 150 });
  }
}


// ————— Manage quantity changes globally —————
function handleQtyChange(delta, item) {
  const orderBox = document.getElementById('order-list');
  if (!orderBox) return;

  // Find existing bar for this item (data-id attribute)
  let bar = orderBox.querySelector(`.item-bar[data-id="${item.itemID}"]`);

  // If there's no bar and we're adding quantity, create one via handleItemClick
  if (!bar && delta > 0) {
    handleItemClick(item.itemID); // this will create a bar and set initial qty
    bar = orderBox.querySelector(`.item-bar[data-id="${item.itemID}"]`);
  }

  // If still no bar (and delta < 0), nothing to reduce
  if (!bar) return;

  const qtyEl = bar.querySelector('.item-qty');
  let qty = parseInt(qtyEl.textContent) || 0;
  qty += delta;

  if (qty < 0) {
    // remove bar
    bar.remove();
  } else {
    // update bar UI
    qtyEl.textContent = qty;
    const currency = getCurrency(item);
    const sumEl = bar.querySelector('.item-sum');
    if (sumEl) sumEl.textContent = `${currency} ${(item.price * qty).toFixed(2)}`;
  }

  updateTotals();
}




// ============================================================================START: New Quantity Helper Functions
// ============================================================================

function syncDisplays(itemContainer, item, newQty) {
    // 1. Define necessary variables and query elements
    const itemCurrency = getCurrency(item); 
    const totalSum = item.price * newQty;
    
    // Query elements here, before using them
    const qtyEls = itemContainer.querySelectorAll(".item-qty");
    const sumEls = itemContainer.querySelectorAll(".item-sum");
    
    // Calculate split values
    const mainValue = Math.floor(totalSum);
    const coinValue = (totalSum - mainValue).toFixed(2).substring(2); 

    // 2. Update Quantity Displays and Animations
    qtyEls.forEach(el => {
        const currentQty = parseInt(el.textContent) || 0;
        
        // Update the content first
        el.textContent = newQty; 
        
        // Apply animation logic
        if (newQty > currentQty) {
            el.animate(
                [{ transform: "scale(1.2)" }, { transform: "scale(1)" }], 
                { duration: 150 }
            );
        } else {
            el.animate(
                [{ transform: "scale(1.2)" }, { transform: "scale(1)" }], 
                { duration: 150 }
            );
        }
    });

    // 3. Update Sum Displays (Split Logic)
    sumEls.forEach(el => {
        const mainEl = el.querySelector('.item-sum-main');
        const coinEl = el.querySelector('.item-sum-coin'); 
        

        if (mainEl && coinEl) {
            mainEl.textContent = `${mainValue.toLocaleString()}`;
            
      
            coinEl.textContent = coinValue;
        } else {

            el.textContent = `${totalSum.toFixed(2)}`;
        }
    });
    
    // 4. Update Totals (This calls the global update)
    updateTotals();
}



/**
 * Attaches click handlers to the Add, Minus, and Delete buttons.
 */
function attachQtyControls(itemContainer, item) {
    const qtyAddB = itemContainer.querySelector("#qty-add");
    const qtyMinB = itemContainer.querySelector("#qty-min");
    const deleteButton = itemContainer.querySelector("#qty-del"); 

    // --- Quantity Add Listener (Unchanged) ---
    if (qtyAddB) {
        qtyAddB.addEventListener('click', (ev) => {
            ev.stopPropagation(); 
            const qtyEls = itemContainer.querySelectorAll(".item-qty");
            let currentQty = parseInt(qtyEls[0].textContent) || 0;
            let newQty = currentQty + 1;
            syncDisplays(itemContainer, item, newQty);
        });
    }

    // ---------------------------------------------------------------------
    // --- Quantity Minus Listener (FIXED LOGIC) ---
    // ---------------------------------------------------------------------
    if (qtyMinB) {
        qtyMinB.addEventListener('click', (ev) => {
            ev.stopPropagation();
            
            const qtyEls = itemContainer.querySelectorAll(".item-qty");
            let currentQty = parseInt(qtyEls[0].textContent) || 0;
            let newQty = currentQty - 1;

            if (newQty < 0) { 
                // CRITICAL FIX: Only remove if newQty is strictly negative (i.e., -1)
                // This means currentQty must have been 0 before the click.
                itemContainer.remove();
                updateTotals(); 
                return;
            }
            
            // If newQty is 0 (coming from 1) or > 0, update the display.
            syncDisplays(itemContainer, item, newQty);
        });
    }

    // --- Delete Listener (Unchanged, remains two-step delete) ---
    if (deleteButton) {
        deleteButton.addEventListener('click', (ev) => {
            ev.stopPropagation();
            
            const qtyEls = itemContainer.querySelectorAll(".item-qty");
            const currentQty = parseInt(qtyEls[0].textContent) || 0;

            if (currentQty > 0) {
                // Step 1: Set quantity to 0
                syncDisplays(itemContainer, item, 0); 
            } else {
                // Step 2: Quantity is already 0, remove the item
                itemContainer.remove();
                updateTotals();
            }
        });
    }
}
// =========================================================================================
// END: New Quantity Helper Functions
// ============================================================================



function handleItemClick(itemId) {
    const item = itemsData.find(i => i.itemID == itemId);
    if (!item) return;

    const orderBox = document.getElementById("order-list");
    const existing = orderBox.querySelector(`.item[data-id="${itemId}"]`);
    const currency = getCurrency(item);

    // --- 1. EXISTING ITEM LOGIC (Refactored to use syncDisplays) ---
    if (existing) {
        const qtyEls = existing.querySelectorAll(".item-qty");
        const currentQty = (parseInt(qtyEls[0].textContent) || 0);
        const newQty = currentQty + 1;

        // *** FIX: Use the shared display function for clean update ***
        syncDisplays(existing, item, newQty);

        highlight(existing);
        // updateTotals() is now inside syncDisplays()
        return;
    }

    // --- 2. NEW ITEM LOGIC (Create, Populate, and ATTACH LISTENERS) ---
    const tmpl = document.getElementById("item-template");
    const clone = tmpl.content.cloneNode(true);
    const itemContainer = clone.querySelector(".item");
    
    itemContainer.dataset.id = item.itemID;

    // Use querySelectorAll to target ALL elements (in both bar and view)
    const nameEls = itemContainer.querySelectorAll(".item-name");
    const descEls = itemContainer.querySelectorAll(".item-desc");
    const brandEls = itemContainer.querySelectorAll(".item-brand");
    const priceEls = itemContainer.querySelectorAll(".est-price");
    const saveEls = itemContainer.querySelectorAll(".est-savings");
    const sumEls = itemContainer.querySelectorAll(".item-sum");
    const qtyEls = itemContainer.querySelectorAll(".item-qty");
    const imageEl = itemContainer.querySelector(".item-img img"); 
    
    
    // Populate data for all matching elements
    nameEls.forEach(el => el.textContent = item.name || "");
    descEls.forEach(el => el.textContent = item.desc || "");
    brandEls.forEach(el => el.textContent = item.brand || "");
    priceEls.forEach(el => el.textContent = `${currency} ${item.price || 0}`);
    saveEls.forEach(el => el.textContent = `Save ${currency} ${item.savings || 0}`);
    
    const imgscr =    item.img || item.icon;
    
    if (imageEl) {
        imageEl.src = imgscr;
        imageEl.alt = item.name || "Item image";
    }
        
    
    // Initial quantity is 1
    qtyEls.forEach(el => el.textContent = 1);
    syncDisplays(itemContainer, item, 1); 
    attachQtyControls(itemContainer, item); 
    itemContainer.querySelector(".item-bar").addEventListener("click", (ev) => {
    ev.stopPropagation(); 
    handleBarClick(itemContainer);
});
    
    orderBox.appendChild(itemContainer);
    highlight(itemContainer);
    // updateTotals() is now inside syncDisplays()
}



document.getElementById('loginForm').addEventListener('submit', ev => {
  ev.preventDefault();
  const u = document.getElementById('loginUsername').value.trim();
  const p = document.getElementById('loginPassword').value;
  attemptLogin(u, p);
});











</script> 
<script>
document.addEventListener("DOMContentLoaded", () => {
  const row = document.querySelector(".item-row");
  const leftBtn = document.getElementById("left-btn");
  const rightBtn = document.getElementById("right-btn");

  // Initially hide both buttons
  leftBtn.style.display = "flex";
  rightBtn.style.display = "flex";

  // Function to check overflow
  function checkOverflow() {
    const maxScroll = row.scrollWidth - row.clientWidth;
    const currentScroll = row.scrollLeft;

    // Show/hide buttons based on scroll position
    // Smoothly fade buttons in or out based on scroll position
        if (currentScroll > 5) {
          leftBtn.style.opacity = 1;
          leftBtn.style.pointerEvents = "auto";
        } else {
          leftBtn.style.opacity = 0.2;
          leftBtn.style.pointerEvents = "none"; // disables click when hidden
        }
        
        if (currentScroll < maxScroll - 5) {
          rightBtn.style.opacity = 1;
          rightBtn.style.pointerEvents = "auto";
        } else {
          rightBtn.style.opacity = 0.2;
          rightBtn.style.pointerEvents = "none";
        }
  }

  // Smooth scroll function
  function scrollByAmount(amount) {
    row.scrollBy({
      left: amount,
      behavior: "smooth"
    });
  }


  
    let scrollInterval;
    
    // Start continuous scroll on mouse down
    rightBtn.addEventListener("mousedown", () => {
      scrollInterval = setInterval(() => scrollByAmount(10), 30);
    });
    leftBtn.addEventListener("mousedown", () => {
      scrollInterval = setInterval(() => scrollByAmount(-10), 30);
    });
    
    // Stop scroll on mouse up or leaving the button
    ["mouseup", "mouseleave"].forEach(evt => {
      rightBtn.addEventListener(evt, () => clearInterval(scrollInterval));
      leftBtn.addEventListener(evt, () => clearInterval(scrollInterval));
    });
    
    // Optional: also stop when mouse released anywhere on the page
    document.addEventListener("mouseup", () => clearInterval(scrollInterval));


  // Detect manual scrolling (e.g., via touch)
  row.addEventListener("scroll", checkOverflow);

  // Recalculate on resize
  window.addEventListener("resize", checkOverflow);

  // Initial check
  checkOverflow();
  
  

  
});
</script>
<script>
    // Configuration: **VERIFY THIS URL IS CORRECT**
    const COGO_DATA_URL = "https://script.google.com/macros/s/AKfycbwEYMAcVc6i6u4DV66eB9OvDh-fFE08hgHmHOBdr930lpF26A8KQoeflbjkXp2twvC2Xw/exec";
    
    // Elements
    const optionButtons = document.getElementById('optionButtons');
    const newMemberForm = document.getElementById('newMemberForm');
    const newGroupForm = document.getElementById('newGroupForm');
    const adminMemberForm = document.getElementById('adminMemberForm');
    const signupHeader = document.getElementById('signupHeader');
    const signupMsg = document.getElementById('signupMsg');
    
    // Utility: Simple Hashing (Simulated)
    // NOTE: This must match the hashing method used in your login function.
    function hashPassword(password) {
        // Using Base64 encoding as a placeholder for a real hash function
        return btoa(password); 
    }

    // --- View Controller: Handles Form Display ---
    function showView(viewId) {
        // Hide all forms/options first
        optionButtons.style.display = 'none';
        newMemberForm.style.display = 'none';
        newGroupForm.style.display = 'none';
        adminMemberForm.style.display = 'none';
        
        // Show the requested view, using 'flex' for the container styling
        const targetView = document.getElementById(viewId);
        if (targetView) {
            targetView.style.display = 'flex';
        }
    }

    // --- Button Handlers ---
    document.getElementById('btnJoinGroup').addEventListener('click', () => {
        signupHeader.textContent = 'Join an Existing Group';
        showView('newMemberForm');
        signupMsg.textContent = ''; // Clear message
    });

    document.getElementById('btnNewGroup').addEventListener('click', () => {
        signupHeader.textContent = 'Create a New Group';
        showView('newGroupForm');
        signupMsg.textContent = ''; // Clear message
    });

    // Back link handler for all forms
    document.querySelectorAll('.back-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            signupHeader.textContent = 'Choose an Option';
            signupMsg.textContent = ''; // Clear message
            // Reset Admin form visibility on back to ensure it doesn't reappear
            adminMemberForm.style.display = 'none'; 
            showView('optionButtons');
        });
    });

    // Handle back to login from the new button structure
    document.getElementById('backToLogin2').addEventListener('click', () => {
        document.getElementById('signUp').style.display = 'none';
        document.getElementById('login').style.display = '';
        signupMsg.textContent = ''; // Clear message
    });


    // --- Core Submission Function ---
    async function postFormData(formData) {
        signupMsg.textContent = 'Submitting...';

        // Convert FormData to a plain JSON object
        const data = {};
        formData.forEach((value, key) => data[key] = value);
        
        // Hash password and add timestamp before sending
        if (data.password) {
            data.passwordHash = hashPassword(data.password);
            delete data.password; // IMPORTANT: Do not send raw password
        }
        data.createdAt = new Date().toISOString();

        try {
            const response = await fetch(COGO_DATA_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            const result = await response.json();
            return result;

        } catch (error) {
            console.error('Fetch Error:', error);
            return { success: false, error: 'Network error or unreachable API.' };
        }
    }

    // 1. NewMember Form Submission (Join Group - POST 1/1)
    newMemberForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(newMemberForm);
        const result = await postFormData(formData);
        
        if (result.success) {
            signupMsg.innerHTML = `<span style="color: #34c759; font-weight: bold;">Success! You are now a Member.</span>`;
            newMemberForm.reset();
            // TODO: Add logic to redirect to member welcome page.
        } else {
            signupMsg.innerHTML = `<span style="color: red; font-weight: bold;">Registration Failed: ${result.error}</span>`;
        }
    });

    // 2. NewGroup Form Submission (Create Group - POST 1/2)
    newGroupForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(newGroupForm);
        const result = await postFormData(formData);

        if (result.success) {
            const newGroupID = result.groupID;
            
            // UX Step 1: Display Group ID and message
            const msg = `Your Group ID is ${newGroupID}. Share this code with your members to join.`;
            document.getElementById('newGroupIdMsg').textContent = msg;
            
            // UX Step 2: Automatically open Admin Form, prefilled
            document.getElementById('adminInviteCode').value = newGroupID;
            
            signupHeader.textContent = 'Finalize Admin Account';
            
            // Clear Group Form and show Admin Form
            newGroupForm.reset();
            showView('adminMemberForm');
            signupMsg.textContent = 'Group created! Enter your personal details.';
        } else {
            signupMsg.innerHTML = `<span style="color: red; font-weight: bold;">Group Creation Failed: ${result.error}</span>`;
        }
    });
    
    // 3. Admin Member Form Submission (Register Admin User - POST 2/2)
    adminMemberForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(adminMemberForm);
        
        // This is the second POST request to the Apps Script (registerUser action)
        const result = await postFormData(formData);
        
        if (result.success) {
            signupMsg.innerHTML = `<span style="color: #34c759; font-weight: bold;">Admin Account Created Successfully! Welcome.</span>`;
            adminMemberForm.reset();
            // TODO: Add logic to redirect to admin member page.
        } else {
            signupMsg.innerHTML = `<span style="color: red; font-weight: bold;">Admin Registration Failed: ${result.error}</span>`;
        }
    });
</script>


 
  
</body>


 
</html>
